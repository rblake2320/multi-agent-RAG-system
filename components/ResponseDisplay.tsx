
import React from 'react';
import { ProcessingState, Stage } from '../types';
import { CitationIcon, LightBulbIcon } from './icons';

interface ResponseDisplayProps {
    state: ProcessingState;
    onReset: () => void;
}

const LoadingSkeleton: React.FC = () => (
    <div className="space-y-4">
        <div className="h-6 bg-base-300 rounded w-3/4 animate-pulse"></div>
        <div className="space-y-2">
            <div className="h-4 bg-base-300 rounded w-full animate-pulse"></div>
            <div className="h-4 bg-base-300 rounded w-full animate-pulse"></div>
            <div className="h-4 bg-base-300 rounded w-5/6 animate-pulse"></div>
        </div>
        <div className="h-8 bg-base-300 rounded w-1/3 mt-6 animate-pulse"></div>
        <div className="space-y-3">
             <div className="h-16 bg-base-300 rounded w-full animate-pulse"></div>
             <div className="h-16 bg-base-300 rounded w-full animate-pulse"></div>
        </div>
    </div>
);

export const ResponseDisplay: React.FC<ResponseDisplayProps> = ({ state, onReset }) => {
    const renderContent = () => {
        if (state.stage === Stage.Idle) {
            return (
                <div className="flex flex-col items-center justify-center h-full text-center text-content-300 p-8">
                    <LightBulbIcon className="w-16 h-16 mb-4 text-gray-600" />
                    <h3 className="text-xl font-semibold text-content-200">Ready for your query</h3>
                    <p>Your AI-generated response will appear here once you submit a query. The system will visualize the entire process from routing to final validation.</p>
                </div>
            );
        }

        if (state.stage !== Stage.Complete && state.stage !== Stage.Error) {
            return <LoadingSkeleton />;
        }
        
        if (state.stage === Stage.Error) {
             return (
                 <div className="p-4 bg-red-900/50 border border-red-500 rounded-lg">
                    <h3 className="font-bold text-red-400">An Error Occurred</h3>
                    <p className="text-red-300 mt-2">{state.error}</p>
                    <button onClick={onReset} className="mt-4 px-4 py-2 bg-red-600 hover:bg-red-700 rounded-md text-white font-semibold">
                        Try Again
                    </button>
                 </div>
             );
        }

        if (state.response) {
            const { text, sources, agentUsed, confidence } = state.response;
            return (
                <div className="animate-fade-in">
                    <div className="flex justify-between items-center mb-4">
                        <div className="text-xs uppercase font-semibold text-content-300">
                            Generated by <span className="font-bold text-content-100">{agentUsed}</span>
                        </div>
                        <div className={`px-3 py-1 text-sm rounded-full ${confidence > 0.8 ? 'bg-green-500/20 text-green-300' : 'bg-yellow-500/20 text-yellow-300'}`}>
                            Confidence: {(confidence * 100).toFixed(1)}%
                        </div>
                    </div>
                    <div className="prose prose-invert max-w-none text-content-200" dangerouslySetInnerHTML={{ __html: text }}></div>
                    
                    <h3 className="mt-8 mb-4 text-lg font-semibold text-content-100 border-t border-base-300 pt-4">Sources</h3>
                    <div className="space-y-3">
                        {sources.map(source => (
                            <a href={source.uri} key={source.id} target="_blank" rel="noopener noreferrer" className="block p-4 bg-base-300/50 hover:bg-base-300 rounded-lg transition-colors">
                                <div className="font-semibold text-brand-primary flex items-center gap-2">
                                    <CitationIcon className="w-4 h-4" />
                                    {source.title}
                                </div>
                                <p className="text-sm text-content-300 mt-1 line-clamp-2">
                                    {source.snippet}
                                </p>
                            </a>
                        ))}
                    </div>
                </div>
            );
        }

        return null;
    };

    return (
        <div className="bg-base-200 p-6 rounded-xl shadow-lg border border-base-300 min-h-[calc(100vh-10rem)] lg:min-h-0 lg:h-full">
            {renderContent()}
        </div>
    );
};
